import { useState, useEffect } from 'react';
import { Radar } from 'react-chartjs-2';
import {
  Chart as ChartJS,
  RadialLinearScale,
  PointElement,
  LineElement,
  Filler,
  Tooltip,
  Legend
} from 'chart.js';
import { getAllLogData } from '../../services/dataService';
import { getTodayString } from '../../utils/dateUtils';
import { useErrorHandler, getUserFriendlyMessage } from '../../utils/errorHandler';

import NoDataMessage from '../common/NoDataMessage';

// Chart.js „Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÇíÁôªÈå≤
ChartJS.register(
  RadialLinearScale,
  PointElement,
  LineElement,
  Filler,
  Tooltip,
  Legend
);

// Ë¶™„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„Åã„Çâ„Éá„Éº„Çø„ÇíÂèó„ÅëÂèñ„Çã
const EmotionDistribution = ({ data: initialData, isLoading: initialLoading, userId, selectedDate }) => {
  const [comparisonView, setComparisonView] = useState(false);
  const [data, setData] = useState(initialData);
  const [isLoading, setIsLoading] = useState(initialLoading);
  const [isRefreshing, setIsRefreshing] = useState(false);
  const [error, setError] = useState(null);
  
  // Áµ±‰∏Ä„Ç®„É©„Éº„Éè„É≥„Éâ„É©„Éº„ÅÆÂàùÊúüÂåñ
  const handleError = useErrorHandler('EmotionDistribution');

  // Vault API„Åã„ÇâÁõ¥Êé•„Éá„Éº„Çø„ÇíÂèñÂæó„Åô„ÇãÈñ¢Êï∞
  const fetchFromVaultAPI = async () => {
    if (!userId || !selectedDate) {
      const error = handleError(
        new Error('„É¶„Éº„Ç∂„ÉºID„Åæ„Åü„ÅØÈÅ∏ÊäûÊó•‰ªò„ÅåÊåáÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì'),
        { userId, selectedDate }
      );
      setError(getUserFriendlyMessage(error));
      return;
    }

    setIsRefreshing(true);
    setError(null);

    try {
      console.log('üîÑ „Éó„É≠„Ç≠„Ç∑ÁµåÁî±„Åßemotion-timeline„Éá„Éº„Çø„ÇíÂÜçÂèñÂæó‰∏≠ÔºàÊÑüÊÉÖÂàÜÂ∏ÉÁî®Ôºâ...');
      
      const url = `/api/proxy/emotion-timeline/${userId}/${selectedDate}`;
      console.log('üåê „É™„ÇØ„Ç®„Çπ„ÉàURL („Éó„É≠„Ç≠„Ç∑):', url);
      
      const response = await fetch(url, {
        method: 'GET',
        headers: { 'Accept': 'application/json' }
      });

      if (!response.ok) {
        const error = handleError(response, {
          endpoint: url,
          userId,
          selectedDate
        });
        setError(getUserFriendlyMessage(error));
        return;
      }

      const fetchedData = await response.json();
      console.log('‚úÖ „Éó„É≠„Ç≠„Ç∑ÁµåÁî±„Åßemotion-timeline„Éá„Éº„ÇøÂÜçÂèñÂæóÊàêÂäüÔºàÊÑüÊÉÖÂàÜÂ∏ÉÁî®Ôºâ:', fetchedData);
      
      // emotion-timeline„Éá„Éº„Çø„Åã„ÇâÊÑüÊÉÖÂàÜÂ∏É„Éá„Éº„Çø„ÇíÁîüÊàê
      // Ê≥®: ÂÆüÈöõ„ÅÆÂÆüË£Ö„Åß„ÅØ„ÄÅÊÑüÊÉÖÂàÜÂ∏É„Éá„Éº„Çø„ÅÆÁîüÊàê„É≠„Ç∏„ÉÉ„ÇØ„ÅåÂøÖË¶Å
      // „Åì„Åì„Åß„ÅØÁ∞°ÊòìÁöÑ„Å´Êó¢Â≠ò„ÅÆ„Éá„Éº„ÇøÊßãÈÄ†„ÇíÁ∂≠ÊåÅ
      setData(initialData);
      
    } catch (err) {
      const error = handleError(err, {
        action: 'fetchFromVaultAPI',
        userId,
        selectedDate
      });
      setError(getUserFriendlyMessage(error));
    } finally {
      setIsRefreshing(false);
    }
  };

  // ÂàùÊúü„Éá„Éº„Çø„ÅåÂ§âÊõ¥„Åï„Çå„Åü„Å®„Åç„Å´ÂÜÖÈÉ®Áä∂ÊÖã„ÇíÊõ¥Êñ∞
  useEffect(() => {
    try {
      setData(initialData);
      setIsLoading(initialLoading);
      // Êñ∞„Åó„ÅÑ„Éá„Éº„Çø„ÅåË™≠„ÅøËæº„Åæ„Çå„Åü„Çâ„Ç®„É©„Éº„Çí„ÇØ„É™„Ç¢
      if (initialData) {
        setError(null);
      }
    } catch (err) {
      const error = handleError(err, {
        action: 'dataUpdate',
        initialData: !!initialData,
        initialLoading
      });
      setError(getUserFriendlyMessage(error));
    }
  }, [initialData, initialLoading, handleError]);

  // „ÉÅ„É£„Éº„Éà„ÅÆ„Ç™„Éó„Ç∑„Éß„É≥
  const chartOptions = {
    responsive: true,
    maintainAspectRatio: false,
    scales: {
      r: {
        beginAtZero: true,
        max: 100,
        ticks: {
          display: false,
          stepSize: 20
        },
        grid: {
          color: 'rgba(0, 0, 0, 0.05)'
        },
        angleLines: {
          color: 'rgba(0, 0, 0, 0.1)'
        },
        pointLabels: {
          font: {
            size: 12
          }
        }
      }
    },
    plugins: {
      legend: {
        position: 'bottom',
        labels: {
          boxWidth: 12,
          font: {
            size: 11
          },
          padding: 15
        }
      },
      tooltip: {
        callbacks: {
          label: (context) => {
            return `${context.dataset.label}: ${context.parsed.r}%`;
          }
        }
      }
    },
  };

  // ÁèæÂú®„ÅÆ„Éá„Éº„Çø„ÅÆ„Åø„ÇíË°®Á§∫
  const currentChartData = data ? {
    labels: data.emotionDistribution.map(item => item.emotion),
    datasets: [
      {
        label: 'ÁèæÂú®',
        data: data.emotionDistribution.map(item => item.percentage),
        backgroundColor: 'rgba(59, 130, 246, 0.2)',
        borderColor: 'rgba(59, 130, 246, 1)',
        borderWidth: 1,
        pointBackgroundColor: data.emotionDistribution.map(item => item.color || 'rgba(59, 130, 246, 1)'),
        pointBorderColor: '#fff',
        pointHoverBackgroundColor: '#fff',
        pointHoverBorderColor: 'rgba(59, 130, 246, 1)',
      }
    ]
  } : null;

  // ‰ª•Ââç„ÅÆ„Éá„Éº„Çø„Å®ÊØîËºÉ
  const comparisonChartData = data?.comparison ? {
    labels: data.emotionDistribution.map(item => item.emotion),
    datasets: [
      {
        label: 'ÁèæÂú®',
        data: data.emotionDistribution.map(item => item.percentage),
        backgroundColor: 'rgba(59, 130, 246, 0.2)',
        borderColor: 'rgba(59, 130, 246, 1)',
        borderWidth: 1,
        pointBackgroundColor: 'rgba(59, 130, 246, 1)',
        pointBorderColor: '#fff',
        pointHoverBackgroundColor: '#fff',
        pointHoverBorderColor: 'rgba(59, 130, 246, 1)'
      },
      {
        label: 'ÂâçÈÄ±',
        data: Object.values(data.comparison.previousWeek),
        backgroundColor: 'rgba(249, 115, 22, 0.2)',
        borderColor: 'rgba(249, 115, 22, 1)',
        borderWidth: 1,
        pointBackgroundColor: 'rgba(249, 115, 22, 1)',
        pointBorderColor: '#fff',
        pointHoverBackgroundColor: '#fff',
        pointHoverBorderColor: 'rgba(249, 115, 22, 1)'
      }
    ]
  } : null;

  return (
    <div className="bg-white rounded-2xl shadow-md p-4 md:p-6">
      <div className="flex justify-between items-start mb-4">
        <div>
          <h2 className="text-xl font-bold text-gray-800">ÊÑüÊÉÖÂàÜÂ∏É</h2>
        </div>
        {/* „Ç∞„É©„ÉïÊõ¥Êñ∞„Éú„Çø„É≥ */}
        <button
          onClick={fetchFromVaultAPI}
          disabled={isRefreshing}
          className={`flex items-center space-x-1 px-3 py-1.5 text-sm font-medium rounded-lg transition-colors duration-200 ${
            isRefreshing
              ? 'bg-gray-300 text-gray-500 cursor-not-allowed'
              : 'bg-blue-600 text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500'
          }`}
          title="Vault API„Åã„ÇâÊúÄÊñ∞„Éá„Éº„Çø„ÇíÂÜçÂèñÂæó"
        >
          {isRefreshing ? (
            <>
              <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
              <span>Êõ¥Êñ∞‰∏≠...</span>
            </>
          ) : (
            <>
              <span>üîÑ</span>
              <span>Êõ¥Êñ∞</span>
            </>
          )}
        </button>
      </div>

      {/* „Ç®„É©„ÉºË°®Á§∫ */}
      {error && (
        <div className="mb-4 p-3 bg-red-50 border border-red-200 rounded-lg">
          <div className="flex items-center space-x-2">
            <span className="text-red-500">‚ö†Ô∏è</span>
            <span className="text-sm text-red-700">{error}</span>
          </div>
        </div>
      )}
      
      {isLoading ? (
        <div className="h-64 flex items-center justify-center">
          <div className="animate-pulse text-blue-500">„Éá„Éº„Çø„ÇíË™≠„ÅøËæº„Åø‰∏≠...</div>
        </div>
      ) : data ? (
        <>
          {data.comparison && (
            <div className="mb-4 flex justify-center">
              <div className="inline-flex rounded-md shadow-sm" role="group">
                <button
                  type="button"
                  className={`px-3 py-1 text-xs font-medium border ${
                    !comparisonView 
                      ? 'bg-blue-600 text-white border-blue-600' 
                      : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-50'
                  } rounded-l-md focus:z-10`}
                  onClick={() => setComparisonView(false)}
                >
                  ÁèæÂú®„ÅÆ„Åø
                </button>
                <button
                  type="button"
                  className={`px-3 py-1 text-xs font-medium border ${
                    comparisonView 
                      ? 'bg-blue-600 text-white border-blue-600' 
                      : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-50'
                  } rounded-r-md focus:z-10`}
                  onClick={() => setComparisonView(true)}
                >
                  ÂâçÈÄ±„Å®ÊØîËºÉ
                </button>
              </div>
            </div>
          )}
          
          <div className="h-64 md:h-72 relative">
            <Radar data={comparisonView ? comparisonChartData : currentChartData} options={chartOptions} />
          </div>
          
          <div className="mt-6 bg-blue-50 rounded-lg p-4">
            <h3 className="text-sm font-medium text-blue-700 mb-1">„Ç§„É≥„Çµ„Ç§„Éà</h3>
            <div className="space-y-2">
              {data.insights.map((insight, index) => (
                <p key={index} className="text-sm text-blue-800">
                  ‚Ä¢ {insight}
                </p>
              ))}
            </div>
          </div>
          
          {data.comparison && comparisonView && (
            <div className="mt-4 grid grid-cols-2 gap-2">
              {Object.entries(data.comparison.change).map(([emotion, change], index) => (
                <div key={index} className="p-2 rounded-md border bg-gray-50">
                  <div className="flex items-center justify-between">
                    <span className="text-sm text-gray-700">{emotion}</span>
                    <span className={`text-sm font-medium ${
                      change > 0 ? 'text-green-600' : change < 0 ? 'text-red-600' : 'text-gray-500'
                    }`}>
                      {change > 0 ? `+${change}` : change}%
                    </span>
                  </div>
                </div>
              ))}
            </div>
          )}
        </>
      ) : (
        <NoDataMessage selectedDate={selectedDate} dataType="ÊÑüÊÉÖÂàÜÂ∏É„Éá„Éº„Çø" />
      )}
    </div>
  );
};

export default EmotionDistribution; 