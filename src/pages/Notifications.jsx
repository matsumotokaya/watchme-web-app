import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import { getUserNotifications, updateNotificationReadStatus } from '../services/notificationService';
import { getAllUsers } from '../services/dataService';
import PageLayout from '../layouts/PageLayout';
import Card from '../components/common/Card';
import Button from '../components/common/Button';
import LoadingSpinner from '../components/common/LoadingSpinner';
import EmptyState from '../components/common/EmptyState';
import Badge from '../components/common/Badge';

const Notifications = () => {
  const { userId } = useParams();
  const [notifications, setNotifications] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [currentUser, setCurrentUser] = useState(null);
  const [availableUsers, setAvailableUsers] = useState([]);

  // „É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„ÇíÂèñÂæó
  useEffect(() => {
    const loadUsers = async () => {
      try {
        const users = await getAllUsers();
        setAvailableUsers(users);
        
        // URL„Éë„É©„É°„Éº„Çø„Åã„Çâ„É¶„Éº„Ç∂„Éº„ÇíÁâπÂÆö„ÄÅ„Å™„Åë„Çå„Å∞ÊúÄÂàù„ÅÆ„É¶„Éº„Ç∂„Éº
        const targetUser = userId ? users.find(u => u.id === userId) : users[0];
        if (targetUser) {
          setCurrentUser(targetUser);
        }
      } catch (error) {
        console.error('„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±ÂèñÂæó„Ç®„É©„Éº:', error);
      }
    };
    
    loadUsers();
  }, [userId]);

  // „ÅäÁü•„Çâ„Åõ„ÇíÂèñÂæó
  useEffect(() => {
    const fetchNotifications = async () => {
      if (!currentUser?.id) return;
      
      try {
        setIsLoading(true);
        const userNotifications = await getUserNotifications(currentUser.id);
        setNotifications(userNotifications);
      } catch (error) {
        console.error('„ÅäÁü•„Çâ„ÅõÂèñÂæó„Ç®„É©„Éº:', error);
        setNotifications([]);
      } finally {
        setIsLoading(false);
      }
    };
    
    fetchNotifications();
  }, [currentUser?.id]);

  // Êó¢Ë™≠Áä∂ÊÖã„ÇíÊõ¥Êñ∞
  const handleMarkAsRead = async (notificationId) => {
    try {
      await updateNotificationReadStatus(currentUser.id, notificationId, true);
      
      // „É≠„Éº„Ç´„É´Áä∂ÊÖã„ÇíÊõ¥Êñ∞
      setNotifications(prev => 
        prev.map(notification => 
          notification.id === notificationId 
            ? { ...notification, isRead: true }
            : notification
        )
      );
    } catch (error) {
      console.error('Êó¢Ë™≠Áä∂ÊÖãÊõ¥Êñ∞„Ç®„É©„Éº:', error);
    }
  };

  // „Åô„Åπ„Å¶Êó¢Ë™≠„Å´„Åô„Çã
  const handleMarkAllAsRead = async () => {
    try {
      const unreadNotifications = notifications.filter(n => !n.isRead);
      
      await Promise.all(
        unreadNotifications.map(notification => 
          updateNotificationReadStatus(currentUser.id, notification.id, true)
        )
      );
      
      // „É≠„Éº„Ç´„É´Áä∂ÊÖã„ÇíÊõ¥Êñ∞
      setNotifications(prev => 
        prev.map(notification => ({ ...notification, isRead: true }))
      );
    } catch (error) {
      console.error('‰∏ÄÊã¨Êó¢Ë™≠„Ç®„É©„Éº:', error);
    }
  };

  // ÈÄöÁü•„ÅÆÁ®ÆÈ°û„Å´„Çà„Å£„Å¶„Ç¢„Ç§„Ç≥„É≥„ÇíËøî„ÅôÈñ¢Êï∞
  const getNotificationIcon = (type) => {
    switch (type) {
      case 'emotion':
        return 'üîπ';
      case 'behavior':
        return 'üìä';
      case 'pattern':
        return 'üìà';
      case 'master':
        return 'üë§';
      case 'info':
        return 'üí°';
      case 'warning':
        return '‚ö†Ô∏è';
      case 'error':
        return '‚ùå';
      default:
        return 'üîî';
    }
  };

  // ÊôÇÂàª„ÇíÁõ∏ÂØæÁöÑ„Å™Ë°®Á§∫„Å´Â§âÊèõ„Åô„ÇãÈñ¢Êï∞
  const formatRelativeTime = (timestamp) => {
    if (!timestamp) return '';
    
    const now = new Date();
    const notificationTime = new Date(timestamp);
    const diffMs = now - notificationTime;
    const diffMinutes = Math.floor(diffMs / (1000 * 60));
    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));
    
    if (diffMinutes < 1) return '„Åü„Å£„Åü‰ªä';
    if (diffMinutes < 60) return `${diffMinutes}ÂàÜÂâç`;
    if (diffHours < 24) return `${diffHours}ÊôÇÈñìÂâç`;
    if (diffDays < 7) return `${diffDays}Êó•Ââç`;
    
    // 1ÈÄ±Èñì‰ª•‰∏äÂâç„ÅØÊó•‰ªòË°®Á§∫
    return notificationTime.toLocaleDateString('ja-JP', {
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const unreadCount = notifications.filter(n => !n.isRead).length;

  // „Éê„ÉÉ„Ç∏„ÅÆËâ≤„ÇíÊ±∫ÂÆö„Åô„ÇãÈñ¢Êï∞
  const getBadgeVariant = (type) => {
    switch (type) {
      case 'warning': return 'warning';
      case 'error': return 'danger';
      case 'info': return 'info';
      default: return 'default';
    }
  };

  return (
    <PageLayout
      title="„ÅäÁü•„Çâ„Åõ"
      backTo="/dashboard"
      backToParams={currentUser?.id ? { userId: currentUser.id } : undefined}
      rightContent={
        unreadCount > 0 ? (
          <Button onClick={handleMarkAllAsRead} size="sm">
            „Åô„Åπ„Å¶Êó¢Ë™≠„Å´„Åô„Çã ({unreadCount})
          </Button>
        ) : null
      }
    >
      {isLoading ? (
        <LoadingSpinner />
      ) : notifications.length > 0 ? (
        <div className="space-y-4">
          {notifications.map((notification) => (
            <Card
              key={notification.id}
              highlighted={!notification.isRead}
              hover
            >
              <div className="flex items-start space-x-4">
                <div className="flex-shrink-0">
                  <span className="text-2xl">{getNotificationIcon(notification.type)}</span>
                </div>
                
                <div className="flex-1 min-w-0">
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      <p className="text-gray-800 leading-relaxed">{notification.message}</p>
                      <div className="flex items-center space-x-4 mt-3">
                        <span className="text-sm text-gray-500">
                          {formatRelativeTime(notification.timestamp)}
                        </span>
                        {notification.type && (
                          <Badge variant={getBadgeVariant(notification.type)}>
                            {notification.type}
                          </Badge>
                        )}
                        {!notification.isRead && (
                          <Badge variant="primary">
                            Êú™Ë™≠
                          </Badge>
                        )}
                      </div>
                    </div>
                    
                    {!notification.isRead && (
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => handleMarkAsRead(notification.id)}
                      >
                        Êó¢Ë™≠„Å´„Åô„Çã
                      </Button>
                    )}
                  </div>
                </div>
              </div>
            </Card>
          ))}
        </div>
      ) : (
        <EmptyState
          title="„ÅäÁü•„Çâ„Åõ„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì"
          description="Êñ∞„Åó„ÅÑ„ÅäÁü•„Çâ„Åõ„ÅåÂ±ä„Åè„Å®„Åì„Åì„Å´Ë°®Á§∫„Åï„Çå„Åæ„Åô„ÄÇ"
        />
      )}
    </PageLayout>
  );
};

export default Notifications; 